{"version":3,"sources":["components/Header/Header.module.css","components/Footer/Footer.module.css","DictReader/DictReader.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js","DictReader/DictReader.module.css"],"names":["module","exports","DictReader","recognition","useRef","textRef","panelRef","wordRef","useState","text","setText","isSpeak","setIsSpeak","isRecord","setIsRecord","isCopied","setIsCopied","useEffect","current","webkitSpeechRecognition","continuous","interimResults","Container","className","classes","content","contentWrap","Jumbotron","jumbotron","Form","action","method","FormText","info","FormGroup","formGroup","ref","panelText","textareaBlocked","currentWord","Input","disabled","type","id","inputText","value","onChange","e","target","handlerText","buttonGroup","Button","color","button","blink","join","onClick","stop","onresult","event","output","i","results","length","transcript","start","n","indexOf","substring","subject","encodeURI","body","window","location","href","navigator","clipboard","writeText","then","setTimeout","catch","err","console","log","style","display","width","Header","header","headerWrap","Footer","footer","rel","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.51351f90.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3j6CT\",\"headerWrap\":\"Header_headerWrap__3Nnl5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__33Jjg\"};","import React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n    Container,\r\n    Jumbotron,\r\n    Button,\r\n    Form,\r\n    FormGroup,\r\n    Input,\r\n    FormText,\r\n} from 'reactstrap';\r\n\r\nimport classes from './DictReader.module.css';\r\n\r\nconst DictReader = () => {\r\n    // eslint-disable-next-line no-undef\r\n    const recognition = useRef(null);\r\n    const textRef = useRef(null);\r\n    const panelRef = useRef(null);\r\n    const wordRef = useRef(null);\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    const [isSpeak, setIsSpeak] = useState(true);\r\n    const [isRecord, setIsRecord] = useState(false);\r\n    const [isCopied, setIsCopied] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // eslint-disable-next-line no-undef\r\n        recognition.current = new webkitSpeechRecognition();\r\n        recognition.current.continuous = true;\r\n        recognition.current.interimResults = true;\r\n\r\n    },[recognition]);\r\n\r\n    const handlerText = (e) => {\r\n        setText(e.target.value);\r\n        if (text === '') {\r\n            setIsSpeak(true);\r\n        }       \r\n    };\r\n\r\n    const handlerToggleRecord = () => {\r\n        if(!isRecord){\r\n            setIsRecord(true); \r\n            recognition.current.onresult = (event) =>{                 \r\n                let output = text === '' ? text : text + ' ';\r\n\r\n                for(var i=0; i<event.results.length; i++){\r\n                    output = output + event.results[i][0].transcript ;\r\n                }\r\n                \r\n                setText(output);       \r\n            }\r\n            recognition.current.start();\r\n        } else {\r\n            setIsRecord(false); \r\n            recognition.current.stop();\r\n        }\r\n    }\r\n\r\n    const handlerCreateEmail = () => {\r\n        setIsRecord(false); \r\n        recognition.current.stop();\r\n\r\n        let n = text.indexOf('\\n');\r\n        if (n < 0 || n >= 80) {\r\n            n = 40 + text.substring(40).indexOf(' ');\r\n        }\r\n        let subject = encodeURI(text.substring(0, n));\r\n        let body = encodeURI(text.substring(n + 1));\r\n        window.location.href = 'mailto:?subject=' + subject + '&body=' + body;\r\n    }\r\n\r\n    const handleCopyLink = () => {\r\n        setIsRecord(false); \r\n        recognition.current.stop();\r\n\r\n        navigator.clipboard\r\n            .writeText(text)\r\n            .then(() => {\r\n                setIsCopied(true);\r\n                setTimeout(() => {\r\n                    setIsCopied(false);\r\n                }, 1000);\r\n            })\r\n            .catch((err) => {\r\n                console.log('Something went wrong', err);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container className={classes.content}>\r\n                <div className={classes.contentWrap}>\r\n                    <Jumbotron className={classes.jumbotron}>\r\n                        <Form action=\"\" method=\"get\">\r\n                            <FormText className={classes.info}>\r\n                                Simple app for speech synthesis using\r\n                                React.js and Web Speech API <br />\r\n                                In the text field, write the text that you\r\n                                want to play with your computer's voice                                    \r\n                            </FormText>\r\n\r\n                            <FormGroup className={classes.formGroup}>\r\n                                <div\r\n                                    ref={panelRef}\r\n                                    className={\r\n                                        isSpeak ? null : classes.panelText\r\n                                    }\r\n                                ></div>\r\n                                <div\r\n                                    className={\r\n                                        isSpeak\r\n                                            ? null\r\n                                            : classes.textareaBlocked\r\n                                    }\r\n                                >\r\n                                    <div\r\n                                        ref={wordRef}\r\n                                        className={\r\n                                            isSpeak\r\n                                                ? null\r\n                                                : classes.currentWord\r\n                                        }\r\n                                    ></div>\r\n                                </div>\r\n\r\n                                <Input\r\n                                    disabled={isSpeak ? false : true}\r\n                                    type=\"textarea\"\r\n                                    id=\"text\"\r\n                                    ref={textRef}\r\n                                    className={classes.inputText}\r\n                                    value={text}\r\n                                    onChange={(e) => handlerText(e)}\r\n                                ></Input>\r\n                            </FormGroup>   \r\n                            <FormGroup className={classes.buttonGroup}>\r\n                                <Button\r\n                                    type=\"button\"\r\n                                    id=\"button-record\"\r\n                                    color={isRecord ? 'danger': 'success'}\r\n                                    className={[classes.button, isRecord ? classes.blink: null].join(' ')}\r\n                                    onClick={handlerToggleRecord}\r\n                                >\r\n                                    <i className=\"fas fa-microphone-alt\"></i>{' '}\r\n                                    Record\r\n                                </Button>\r\n\r\n                                <Button\r\n                                    disabled={!text ? true : false}\r\n                                    type=\"button\"\r\n                                    id=\"button-record\"\r\n                                    color=\"info\"\r\n                                    className={classes.button}\r\n                                    onClick={handlerCreateEmail}\r\n                                >\r\n                                    <i className=\"fas fa-envelope\"></i>{' '}\r\n                                    Email\r\n                                </Button>\r\n\r\n                                <Button\r\n                                    disabled={!text ? true : false}\r\n                                    type=\"button\"\r\n                                    id=\"button-record\"\r\n                                    color={isCopied ? 'success' : 'info'}\r\n                                    className={classes.button}\r\n                                    onClick={handleCopyLink}\r\n                                    style={{display: 'inline-block', width: '100px'}}\r\n                                >\r\n                                    <i className=\"fas fa-copy\"></i>{' '}\r\n                                    {isCopied ? 'Copied' : 'Copy'}\r\n                                </Button>\r\n                            </FormGroup> \r\n                        </Form>\r\n                    </Jumbotron>                        \r\n                </div>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DictReader;\r\n","import React from 'react';\r\n\r\nimport classes from './Header.module.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <div className={classes.headerWrap}>\r\n                <h1>DICT.OK | Web Speech API</h1>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport classes from './Footer.module.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className={classes.footer}>\r\n            <p>\r\n                © 2020 | DICT.OK | Created by Dmitriy Zatulovskiy |{' '}\r\n                <a\r\n                    href=\"https://github.com/GrafSoul/react-speech-to-text\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    GitHub\r\n                </a>\r\n            </p>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\n\nimport DictReader from './DictReader/DictReader';\nimport Header from './components/Header/Header';\nimport Footer from './components/Footer/Footer';\n\nconst App = () => {\n    return (\n        <>\n            <Header />\n            <DictReader />\n            <Footer />\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"DictReader_content__1AWu-\",\"contentWrap\":\"DictReader_contentWrap__17bWk\",\"curtainBlocked\":\"DictReader_curtainBlocked__1gbno\",\"jumbotron\":\"DictReader_jumbotron__3mAjC\",\"info\":\"DictReader_info__14WPu\",\"formGroup\":\"DictReader_formGroup__3kj2e\",\"inputText\":\"DictReader_inputText__265XQ\",\"rangeInput\":\"DictReader_rangeInput__3XKLT\",\"button\":\"DictReader_button__1EgOw\",\"buttonGroup\":\"DictReader_buttonGroup__1SYfb\",\"textareaBlocked\":\"DictReader_textareaBlocked__3pH_K\",\"panelText\":\"DictReader_panelText__22jp_\",\"currentWord\":\"DictReader_currentWord__3DM2n\",\"blink\":\"DictReader_blink__cPMdJ\",\"blinker\":\"DictReader_blinker__2rSku\"};"],"sourceRoot":""}